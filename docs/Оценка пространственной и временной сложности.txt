V - количество вершин.
R - количество ребер.


```````````````````````````````````````````````````````````````````````` 
`               1. std::vector<std::list<int>> (список смежности)      `
`                                                                      `
`       Пространственная сложность: F(V + R).                          `
`   std::vector хранит один std::list для каждой вершины (V вершин)    `
`   Каждый std::list хранит все ребра, то есть в сумме R ребер.        `
````````````````````````````````````````````````````````````````````````         

```````````````````````````````````````````````````````````````````````` 
`               2. Алгоритм поиска в ширину                            `
`                                                                      `
`       Временная сложность: F(V + R).                                 `
`   Каждая вершина посещается не более одного раза.                    `
`   Каждое ребро просматривается не более одного раза.                 `
`                                                                      `
`       Пространственная сложность: F(V), в худшем случае.             `
`   std::queue хранит вершины, которых в худшем случае V               `
`   std::vector<bool> visited тоже хранит информацию по V вершинам.    `
```````````````````````````````````````````````````````````````````````` 

````````````````````````````````````````````````````````````````````````
`               3. Алгоритм поиска в глубину (рекурсивный)             `
`                                                                      `
`       Временная сложность: F(V + R).                                 `
`   Каждая вершина посещается не более одного раза.                    `
`   Каждое ребро просматривается не более одного раза.                 `
`                                                                      `
`       Пространственная сложность: F(V), в худшем случае.             `
`   std::vector<bool> visited хранит информацию по V вершинам.         `
`   В худшем случае может быть V вызовов рекурсивной функции.          `
````````````````````````````````````````````````````````````````````````